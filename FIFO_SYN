`timescale 1ns / 1ps
`define BUF_WIDTH 3    // BUF_SIZE = 16 -> BUF_WIDTH = 4, no. of bits to be used in pointer
`define BUF_SIZE ( 1<<`BUF_WIDTH )
module fifo( clk, rst, data_in, data_out, wr_en, rd_en, empty, full, fifo_counter );
input                 rst, clk, wr_en, rd_en;   
input [7:0]           data_in;                   
output[7:0]           data_out;                  
output                empty, full;      
output[`BUF_WIDTH :0] fifo_counter;              
reg[7:0]              data_out;
reg                   empty, full;
reg[`BUF_WIDTH :0]    fifo_counter;
reg[`BUF_WIDTH -1:0]  rd_ptr, wr_ptr;           
reg[7:0]     data_mem[`BUF_SIZE -1 : 0];  
always @(fifo_counter)
begin
   empty = (fifo_counter==0);   
   full = (fifo_counter== `BUF_SIZE);  
end
always @(posedge clk or posedge rst)
begin
   if( rst )
       fifo_counter <= 0;		
   else if( (!full && wr_en) && ( !empty && rd_en ) )  
       fifo_counter <= fifo_counter;			
   else if( !full && wr_en )			
       fifo_counter <= fifo_counter + 1;
   else if( !empty && rd_en )		
       fifo_counter <= fifo_counter - 1;
   else
      fifo_counter <= fifo_counter;		
end
always @( posedge clk or posedge rst)
begin
   if( rst )
      data_out <= 0;	
   else
   begin
      if( rd_en && !empty )
         data_out <= data_mem[rd_ptr];	
      else
         data_out <= data_out;		
   end
end
always @(posedge clk)
begin
 if( wr_en && !full )
      data_mem[ wr_ptr ] <= data_in;		
   else
      data_mem[ wr_ptr ] <= data_mem[ wr_ptr ];
end
always@(posedge clk or posedge rst)
begin
   if( rst )
   begin
      wr_ptr <= 0;		
      rd_ptr <= 0;		
   end
   else
   begin
      if( !full && wr_en )    
			wr_ptr <= wr_ptr + 1;		
      else  
			wr_ptr <= wr_ptr;
      if( !empty && rd_en )   
			rd_ptr <= rd_ptr + 1;		
      else 
			rd_ptr <= rd_ptr;
   end
end
endmodule
